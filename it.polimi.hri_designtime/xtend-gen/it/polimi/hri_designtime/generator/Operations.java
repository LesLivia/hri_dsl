/**
 * generated by Xtext 2.28.0
 */
package it.polimi.hri_designtime.generator;

import it.polimi.hri_designtime.hriDsl.Floor;
import it.polimi.hri_designtime.hriDsl.Parameter;
import it.polimi.hri_designtime.hriDsl.Surface;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import org.eclipse.emf.common.util.EList;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;

@SuppressWarnings("all")
public class Operations {
  private int max_n;

  private HashSet<Point2D.Float> n;

  private Rectangle2D temp_r;

  private HashSet<Point2D.Float> points_set;

  private HashMap<Rectangle2D.Float, HashSet<Point2D.Float>> rectangles_map;

  private ArrayList<Rectangle2D.Float> rectangles;

  private HashMap<Point2D.Float, HashSet<Rectangle2D.Float>> points_map;

  public int computeIntersections(final Floor floor, final ArrayList<Point2D.Float> intersections) {
    HashSet<Point2D.Float> _hashSet = new HashSet<Point2D.Float>();
    this.points_set = _hashSet;
    HashMap<Rectangle2D.Float, HashSet<Point2D.Float>> _hashMap = new HashMap<Rectangle2D.Float, HashSet<Point2D.Float>>();
    this.rectangles_map = _hashMap;
    HashMap<Point2D.Float, HashSet<Rectangle2D.Float>> _hashMap_1 = new HashMap<Point2D.Float, HashSet<Rectangle2D.Float>>();
    this.points_map = _hashMap_1;
    ArrayList<Rectangle2D.Float> _arrayList = new ArrayList<Rectangle2D.Float>();
    this.rectangles = _arrayList;
    EList<Surface> _surfaces = floor.getSurfaces();
    for (final Surface s : _surfaces) {
      {
        this.rectangles.add(this.createRectangle(s));
        Rectangle2D.Float _last = IterableExtensions.<Rectangle2D.Float>last(this.rectangles);
        HashSet<Point2D.Float> _hashSet_1 = new HashSet<Point2D.Float>();
        this.rectangles_map.put(_last, _hashSet_1);
      }
    }
    for (int i = 0; (i < (this.rectangles.size() - 1)); i++) {
      for (int j = (i + 1); (j < this.rectangles.size()); j++) {
        boolean _intersects = this.intersects(this.rectangles.get(i), this.rectangles.get(j));
        if (_intersects) {
          this.temp_r = this.rectangles.get(i).createIntersection(this.rectangles.get(j));
          float _floatValue = Double.valueOf(this.temp_r.getCenterX()).floatValue();
          float _floatValue_1 = Double.valueOf(this.temp_r.getCenterY()).floatValue();
          Point2D.Float _float = new Point2D.Float(_floatValue, _floatValue_1);
          this.points_set.add(_float);
        }
      }
    }
    for (final Point2D.Float p : this.points_set) {
      {
        HashSet<Rectangle2D.Float> _hashSet_1 = new HashSet<Rectangle2D.Float>();
        this.points_map.put(p, _hashSet_1);
        for (final Rectangle2D.Float r : this.rectangles) {
          boolean _contains = r.contains(p);
          if (_contains) {
            this.rectangles_map.get(r).add(p);
            this.points_map.get(p).add(r);
          }
        }
      }
    }
    this.max_n = 0;
    for (final Point2D.Float p_1 : this.points_set) {
      {
        HashSet<Point2D.Float> _hashSet_1 = new HashSet<Point2D.Float>();
        this.n = _hashSet_1;
        HashSet<Rectangle2D.Float> _get = this.points_map.get(p_1);
        for (final Rectangle2D.Float r : _get) {
          this.n.addAll(this.rectangles_map.get(r));
        }
        int _size = this.n.size();
        int _minus = (_size - 1);
        boolean _greaterThan = (_minus > this.max_n);
        if (_greaterThan) {
          int _size_1 = this.n.size();
          int _minus_1 = (_size_1 - 1);
          this.max_n = _minus_1;
        }
      }
    }
    intersections.addAll(this.points_set);
    return this.max_n;
  }

  private boolean intersects(final Rectangle2D.Float r1, final Rectangle2D.Float r2) {
    if ((((r1.getY() < (r2.getY() + r2.getHeight())) && ((r1.getY() + r1.getHeight()) > r2.getY())) && ((r1.getX() < (r2.getX() + r2.getWidth())) && ((r1.getX() + r1.getWidth()) > r2.getX())))) {
      return true;
    } else {
      return false;
    }
  }

  public Rectangle2D.Float createRectangle(final Surface s) {
    if (((s.getVertices().getVertex_A().getX() != s.getVertices().getVertex_C().getX()) && (s.getVertices().getVertex_A().getY() != s.getVertices().getVertex_C().getY()))) {
      float _x = s.getVertices().getVertex_A().getX();
      float _y = s.getVertices().getVertex_A().getY();
      Point2D.Float A = new Point2D.Float(_x, _y);
      float _x_1 = s.getVertices().getVertex_C().getX();
      float _y_1 = s.getVertices().getVertex_A().getY();
      Point2D.Float B = new Point2D.Float(_x_1, _y_1);
      float _x_2 = s.getVertices().getVertex_C().getX();
      float _y_2 = s.getVertices().getVertex_C().getY();
      Point2D.Float C = new Point2D.Float(_x_2, _y_2);
      float _x_3 = s.getVertices().getVertex_A().getX();
      float _y_3 = s.getVertices().getVertex_C().getY();
      Point2D.Float D = new Point2D.Float(_x_3, _y_3);
      ArrayList<Point2D.Float> tempList = new ArrayList<Point2D.Float>();
      tempList.add(A);
      if (((tempList.get(0).getX() <= B.getX()) && (tempList.get(0).getY() <= B.getY()))) {
        tempList.add(B);
      } else {
        tempList.add(0, B);
      }
      if (((tempList.get(0).getX() <= C.getX()) && (tempList.get(0).getY() <= C.getY()))) {
        tempList.add(C);
      } else {
        tempList.add(0, C);
      }
      if (((tempList.get(0).getX() <= D.getX()) && (tempList.get(0).getY() <= D.getY()))) {
        tempList.add(D);
      } else {
        tempList.add(0, D);
      }
      final Point2D.Float vertex = tempList.remove(0);
      final Function1<Point2D.Float, Boolean> _function = (Point2D.Float e) -> {
        double _y_4 = e.getY();
        double _y_5 = vertex.getY();
        return Boolean.valueOf((_y_4 == _y_5));
      };
      double _x_4 = IterableExtensions.<Point2D.Float>findFirst(tempList, _function).getX();
      double _x_5 = vertex.getX();
      double width = (_x_4 - _x_5);
      final Function1<Point2D.Float, Boolean> _function_1 = (Point2D.Float e) -> {
        double _x_6 = e.getX();
        double _x_7 = vertex.getX();
        return Boolean.valueOf((_x_6 == _x_7));
      };
      double _y_4 = IterableExtensions.<Point2D.Float>findFirst(tempList, _function_1).getY();
      double _y_5 = vertex.getY();
      double height = (_y_4 - _y_5);
      float _floatValue = Double.valueOf(vertex.getX()).floatValue();
      float _floatValue_1 = Double.valueOf(vertex.getY()).floatValue();
      float _floatValue_2 = Double.valueOf(width).floatValue();
      float _floatValue_3 = Double.valueOf(height).floatValue();
      return new Rectangle2D.Float(_floatValue, _floatValue_1, _floatValue_2, _floatValue_3);
    }
    return null;
  }

  public float unitConversion(final float f, final Parameter parameter) {
    String length_unit = "m";
    float result = 0.0f;
    if ((parameter != null)) {
      length_unit = parameter.getLength_unit().toString();
    }
    if (length_unit != null) {
      switch (length_unit) {
        case "m":
          result = f;
          break;
        case "km":
          result = (f / 1000.0f);
          break;
        case "cm":
          result = (f * 100.0f);
          break;
        default:
          break;
      }
    } else {
    }
    return result;
  }
}
