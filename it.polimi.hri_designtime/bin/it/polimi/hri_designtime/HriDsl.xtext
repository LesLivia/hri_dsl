grammar it.polimi.hri_designtime.HriDsl with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate hriDsl "http://www.polimi.it/hri_designtime/HriDsl"

Model:
	parameter=(Parameter)? scenarios+=(Scenario)*;

Parameter:
	'parameter' 'length_unit' length_unit=Length_unit;

enum Length_unit:
	METER='m' 
	|KILOMETER='km'
	|CENTIMETER='cm';

Scenario:
	floor=Floor robots=Robots humans=Humans missions+=(Mission)+;

Floor:
	'build' 'floor' floor_name=ID ':' surfaces+=(Surface)+  points+=(Point)+;

Surface:
	'add' 'rectangular_surface' name=ID 'with' vertices=Vertices;

Vertices:
	'coordinates_vertex_A' vertex_A=Coordinates 'coordinates_vertex_C' vertex_C=Coordinates;

Point:
	'add' 'point_of_interest' name=ID 'with' 'coordinates' coordinates=Coordinates;

Robots:
	'define' 'robots' ':' robots+=(Robot)+;

Robot:
	'robot' name=ID 'with' 'coordinates' coordinates=Coordinates 'type' type=Type 'charge_percentage' charge_percentage=INT;

enum Type:
	TURTLEBOT3_BURGER='turtlebot3_burger'
	|TIAGO='tiago'
	|PEPPER='pepper';

Humans:
	'define' 'humans' ':' humans+=(Human)+;

Human:
	'human' name=ID 'with' 'coordinates' coordinates=Coordinates 'speed' speed=FLOAT 'dexterity' dext=INT 'fatigue_profile' fatigue_profile=Fatigue_profile 'free_will_profile' free_will_profile=Free_will_profile;

enum Fatigue_profile:
	YOUNG_HEALTHY='young_healthy'
	| YOUNG_SICK='young_sick'
	| ELDERLY_HEALTHY='elderly_healthy'
	| ELDERLY_SICK='elderly_sick'
	| COVID_PATIENT='covid_patient';
	
enum Free_will_profile:
	NORMAL='normal' 
	| HIGH='high'
	| LOW='low'
	| DISABLED='disabled';
	
Mission:
	'define' 'mission' name=ID ':' assignments+=(Assignment)+ queries=Queries;

Assignment:
	'do' pattern=Pattern 'for' client=ID 'with' 'target' target=ID;

enum Pattern:
	ROBOT_LEADER='robot_leader'     
	| ROBOT_FOLLOWER='robot_follower'  
	| ROBOT_TRANSPORTER='robot_transporter' 	
	| ROBOT_COMPETITOR='robot_competitor' 	
	| ROBOT_RESCUER='robot_rescuer' 	  
	| ROBOT_ASSISTANT='robot_client';

Queries:
	'define' 'queries' 'of' 'mission' mission=ID ':' queries+=(Query)+;

Query:
	'compute' query_type=Query_type 'with' 'duration' duration=INT 'runs' runs=INT;

enum Query_type:
	SIMULATION='simulation' 
	| PROBABILITY_OF_SUCCESS='probability_of_success' 
	| EXPECTED_FATIGUE='expected_fatigue' 
 	| EXPECTED_CHARGE='expected_charge' 
 	| PROBABILITY_OF_FAILURE='probability_of_failure';

Coordinates:
	'(' x=FLOAT ';' y=FLOAT ')';

terminal FLOAT returns ecore::EFloat:
	INT DEC;
terminal DEC:
	'.' INT;