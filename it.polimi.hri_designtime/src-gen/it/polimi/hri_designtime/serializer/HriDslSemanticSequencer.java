/*
 * generated by Xtext 2.25.0
 */
package it.polimi.hri_designtime.serializer;

import com.google.inject.Inject;
import it.polimi.hri_designtime.hriDsl.Assignment;
import it.polimi.hri_designtime.hriDsl.Coordinates;
import it.polimi.hri_designtime.hriDsl.Floor;
import it.polimi.hri_designtime.hriDsl.HriDslPackage;
import it.polimi.hri_designtime.hriDsl.Human;
import it.polimi.hri_designtime.hriDsl.Humans;
import it.polimi.hri_designtime.hriDsl.Mission;
import it.polimi.hri_designtime.hriDsl.Model;
import it.polimi.hri_designtime.hriDsl.Point;
import it.polimi.hri_designtime.hriDsl.Queries;
import it.polimi.hri_designtime.hriDsl.Query;
import it.polimi.hri_designtime.hriDsl.Robot;
import it.polimi.hri_designtime.hriDsl.Robots;
import it.polimi.hri_designtime.hriDsl.Scenario;
import it.polimi.hri_designtime.hriDsl.Surface;
import it.polimi.hri_designtime.hriDsl.Vertices;
import it.polimi.hri_designtime.services.HriDslGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class HriDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private HriDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == HriDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case HriDslPackage.ASSIGNMENT:
				sequence_Assignment(context, (Assignment) semanticObject); 
				return; 
			case HriDslPackage.COORDINATES:
				sequence_Coordinates(context, (Coordinates) semanticObject); 
				return; 
			case HriDslPackage.FLOOR:
				sequence_Floor(context, (Floor) semanticObject); 
				return; 
			case HriDslPackage.HUMAN:
				sequence_Human(context, (Human) semanticObject); 
				return; 
			case HriDslPackage.HUMANS:
				sequence_Humans(context, (Humans) semanticObject); 
				return; 
			case HriDslPackage.MISSION:
				sequence_Mission(context, (Mission) semanticObject); 
				return; 
			case HriDslPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case HriDslPackage.PARAMETER:
				sequence_Parameter(context, (it.polimi.hri_designtime.hriDsl.Parameter) semanticObject); 
				return; 
			case HriDslPackage.POINT:
				sequence_Point(context, (Point) semanticObject); 
				return; 
			case HriDslPackage.QUERIES:
				sequence_Queries(context, (Queries) semanticObject); 
				return; 
			case HriDslPackage.QUERY:
				sequence_Query(context, (Query) semanticObject); 
				return; 
			case HriDslPackage.ROBOT:
				sequence_Robot(context, (Robot) semanticObject); 
				return; 
			case HriDslPackage.ROBOTS:
				sequence_Robots(context, (Robots) semanticObject); 
				return; 
			case HriDslPackage.SCENARIO:
				sequence_Scenario(context, (Scenario) semanticObject); 
				return; 
			case HriDslPackage.SURFACE:
				sequence_Surface(context, (Surface) semanticObject); 
				return; 
			case HriDslPackage.VERTICES:
				sequence_Vertices(context, (Vertices) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Assignment returns Assignment
	 *
	 * Constraint:
	 *     (pattern=Pattern client=ID target=ID)
	 */
	protected void sequence_Assignment(ISerializationContext context, Assignment semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HriDslPackage.Literals.ASSIGNMENT__PATTERN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HriDslPackage.Literals.ASSIGNMENT__PATTERN));
			if (transientValues.isValueTransient(semanticObject, HriDslPackage.Literals.ASSIGNMENT__CLIENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HriDslPackage.Literals.ASSIGNMENT__CLIENT));
			if (transientValues.isValueTransient(semanticObject, HriDslPackage.Literals.ASSIGNMENT__TARGET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HriDslPackage.Literals.ASSIGNMENT__TARGET));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAssignmentAccess().getPatternPatternEnumRuleCall_1_0(), semanticObject.getPattern());
		feeder.accept(grammarAccess.getAssignmentAccess().getClientIDTerminalRuleCall_3_0(), semanticObject.getClient());
		feeder.accept(grammarAccess.getAssignmentAccess().getTargetIDTerminalRuleCall_6_0(), semanticObject.getTarget());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Coordinates returns Coordinates
	 *
	 * Constraint:
	 *     (x=FLOAT y=FLOAT)
	 */
	protected void sequence_Coordinates(ISerializationContext context, Coordinates semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HriDslPackage.Literals.COORDINATES__X) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HriDslPackage.Literals.COORDINATES__X));
			if (transientValues.isValueTransient(semanticObject, HriDslPackage.Literals.COORDINATES__Y) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HriDslPackage.Literals.COORDINATES__Y));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCoordinatesAccess().getXFLOATTerminalRuleCall_1_0(), semanticObject.getX());
		feeder.accept(grammarAccess.getCoordinatesAccess().getYFLOATTerminalRuleCall_3_0(), semanticObject.getY());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Floor returns Floor
	 *
	 * Constraint:
	 *     (floor_name=ID surfaces+=Surface+ points+=Point+)
	 */
	protected void sequence_Floor(ISerializationContext context, Floor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Human returns Human
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         coordinates=Coordinates 
	 *         speed=FLOAT 
	 *         dext=INT 
	 *         fatigue_profile=Fatigue_profile 
	 *         free_will_profile=Free_will_profile
	 *     )
	 */
	protected void sequence_Human(ISerializationContext context, Human semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HriDslPackage.Literals.HUMAN__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HriDslPackage.Literals.HUMAN__NAME));
			if (transientValues.isValueTransient(semanticObject, HriDslPackage.Literals.HUMAN__COORDINATES) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HriDslPackage.Literals.HUMAN__COORDINATES));
			if (transientValues.isValueTransient(semanticObject, HriDslPackage.Literals.HUMAN__SPEED) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HriDslPackage.Literals.HUMAN__SPEED));
			if (transientValues.isValueTransient(semanticObject, HriDslPackage.Literals.HUMAN__DEXT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HriDslPackage.Literals.HUMAN__DEXT));
			if (transientValues.isValueTransient(semanticObject, HriDslPackage.Literals.HUMAN__FATIGUE_PROFILE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HriDslPackage.Literals.HUMAN__FATIGUE_PROFILE));
			if (transientValues.isValueTransient(semanticObject, HriDslPackage.Literals.HUMAN__FREE_WILL_PROFILE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HriDslPackage.Literals.HUMAN__FREE_WILL_PROFILE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getHumanAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getHumanAccess().getCoordinatesCoordinatesParserRuleCall_3_0(), semanticObject.getCoordinates());
		feeder.accept(grammarAccess.getHumanAccess().getSpeedFLOATTerminalRuleCall_5_0(), semanticObject.getSpeed());
		feeder.accept(grammarAccess.getHumanAccess().getDextINTTerminalRuleCall_7_0(), semanticObject.getDext());
		feeder.accept(grammarAccess.getHumanAccess().getFatigue_profileFatigue_profileEnumRuleCall_9_0(), semanticObject.getFatigue_profile());
		feeder.accept(grammarAccess.getHumanAccess().getFree_will_profileFree_will_profileEnumRuleCall_11_0(), semanticObject.getFree_will_profile());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Humans returns Humans
	 *
	 * Constraint:
	 *     humans+=Human+
	 */
	protected void sequence_Humans(ISerializationContext context, Humans semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Mission returns Mission
	 *
	 * Constraint:
	 *     (name=ID assignments+=Assignment+ queries=Queries)
	 */
	protected void sequence_Mission(ISerializationContext context, Mission semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     ((parameter=Parameter scenarios+=Scenario+) | scenarios+=Scenario+)?
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns Parameter
	 *
	 * Constraint:
	 *     length_unit=Length_unit
	 */
	protected void sequence_Parameter(ISerializationContext context, it.polimi.hri_designtime.hriDsl.Parameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HriDslPackage.Literals.PARAMETER__LENGTH_UNIT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HriDslPackage.Literals.PARAMETER__LENGTH_UNIT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getParameterAccess().getLength_unitLength_unitEnumRuleCall_2_0(), semanticObject.getLength_unit());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Point returns Point
	 *
	 * Constraint:
	 *     (name=ID coordinates=Coordinates)
	 */
	protected void sequence_Point(ISerializationContext context, Point semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HriDslPackage.Literals.POINT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HriDslPackage.Literals.POINT__NAME));
			if (transientValues.isValueTransient(semanticObject, HriDslPackage.Literals.POINT__COORDINATES) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HriDslPackage.Literals.POINT__COORDINATES));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPointAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getPointAccess().getCoordinatesCoordinatesParserRuleCall_3_0(), semanticObject.getCoordinates());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Queries returns Queries
	 *
	 * Constraint:
	 *     (mission=ID queries+=Query+)
	 */
	protected void sequence_Queries(ISerializationContext context, Queries semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Query returns Query
	 *
	 * Constraint:
	 *     (query_type=Query_type duration=INT runs=STRING)
	 */
	protected void sequence_Query(ISerializationContext context, Query semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HriDslPackage.Literals.QUERY__QUERY_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HriDslPackage.Literals.QUERY__QUERY_TYPE));
			if (transientValues.isValueTransient(semanticObject, HriDslPackage.Literals.QUERY__DURATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HriDslPackage.Literals.QUERY__DURATION));
			if (transientValues.isValueTransient(semanticObject, HriDslPackage.Literals.QUERY__RUNS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HriDslPackage.Literals.QUERY__RUNS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getQueryAccess().getQuery_typeQuery_typeEnumRuleCall_1_0(), semanticObject.getQuery_type());
		feeder.accept(grammarAccess.getQueryAccess().getDurationINTTerminalRuleCall_4_0(), semanticObject.getDuration());
		feeder.accept(grammarAccess.getQueryAccess().getRunsSTRINGTerminalRuleCall_6_0(), semanticObject.getRuns());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Robot returns Robot
	 *
	 * Constraint:
	 *     (name=ID coordinates=Coordinates type=Type charge_percentage=FLOAT)
	 */
	protected void sequence_Robot(ISerializationContext context, Robot semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HriDslPackage.Literals.ROBOT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HriDslPackage.Literals.ROBOT__NAME));
			if (transientValues.isValueTransient(semanticObject, HriDslPackage.Literals.ROBOT__COORDINATES) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HriDslPackage.Literals.ROBOT__COORDINATES));
			if (transientValues.isValueTransient(semanticObject, HriDslPackage.Literals.ROBOT__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HriDslPackage.Literals.ROBOT__TYPE));
			if (transientValues.isValueTransient(semanticObject, HriDslPackage.Literals.ROBOT__CHARGE_PERCENTAGE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HriDslPackage.Literals.ROBOT__CHARGE_PERCENTAGE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRobotAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getRobotAccess().getCoordinatesCoordinatesParserRuleCall_3_0(), semanticObject.getCoordinates());
		feeder.accept(grammarAccess.getRobotAccess().getTypeTypeEnumRuleCall_5_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getRobotAccess().getCharge_percentageFLOATTerminalRuleCall_7_0(), semanticObject.getCharge_percentage());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Robots returns Robots
	 *
	 * Constraint:
	 *     robots+=Robot+
	 */
	protected void sequence_Robots(ISerializationContext context, Robots semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Scenario returns Scenario
	 *
	 * Constraint:
	 *     (floor=Floor robots=Robots humans=Humans missions+=Mission+)
	 */
	protected void sequence_Scenario(ISerializationContext context, Scenario semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Surface returns Surface
	 *
	 * Constraint:
	 *     (name=ID vertices=Vertices)
	 */
	protected void sequence_Surface(ISerializationContext context, Surface semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HriDslPackage.Literals.SURFACE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HriDslPackage.Literals.SURFACE__NAME));
			if (transientValues.isValueTransient(semanticObject, HriDslPackage.Literals.SURFACE__VERTICES) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HriDslPackage.Literals.SURFACE__VERTICES));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSurfaceAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getSurfaceAccess().getVerticesVerticesParserRuleCall_3_0(), semanticObject.getVertices());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Vertices returns Vertices
	 *
	 * Constraint:
	 *     (vertex_A=Coordinates vertex_C=Coordinates)
	 */
	protected void sequence_Vertices(ISerializationContext context, Vertices semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HriDslPackage.Literals.VERTICES__VERTEX_A) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HriDslPackage.Literals.VERTICES__VERTEX_A));
			if (transientValues.isValueTransient(semanticObject, HriDslPackage.Literals.VERTICES__VERTEX_C) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HriDslPackage.Literals.VERTICES__VERTEX_C));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVerticesAccess().getVertex_ACoordinatesParserRuleCall_0_0(), semanticObject.getVertex_A());
		feeder.accept(grammarAccess.getVerticesAccess().getVertex_CCoordinatesParserRuleCall_1_0(), semanticObject.getVertex_C());
		feeder.finish();
	}
	
	
}
